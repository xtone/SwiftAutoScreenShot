// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SwiftAutoScreenShot
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Photos
import Swift
@_exported import SwiftAutoScreenShot
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers public class AutoScreenShot {
  public var isSaveAllScreenShot: Swift.Bool
  public var saveImageToLocal: Swift.Bool
  public static let shared: SwiftAutoScreenShot.AutoScreenShot
  public func setup(apiKey: Swift.String, projectId: Swift.String)
  @objc deinit
}
extension SwiftAutoScreenShot.AutoScreenShot {
  @_Concurrency.MainActor public func takeScreenShot(_ targetViewController: UIKit.UIViewController)
}
extension SwiftAutoScreenShot.AutoScreenShot {
  @_Concurrency.MainActor public func takeScreenShotWithScroll(targetScrollView: UIKit.UIScrollView, targetViewController: UIKit.UIViewController, outerTopOffset: CoreFoundation.CGFloat, outerBottomOffset: CoreFoundation.CGFloat, innerTopOffset: CoreFoundation.CGFloat, innerBottomOffset: CoreFoundation.CGFloat)
  @_Concurrency.MainActor public func takeScreenShotWithScroll(targetViewController: UIKit.UIViewController, outerTopOffset: CoreFoundation.CGFloat, outerBottomOffset: CoreFoundation.CGFloat, innerTopOffset: CoreFoundation.CGFloat, innerBottomOffset: CoreFoundation.CGFloat)
}
extension SwiftAutoScreenShot.AutoScreenShot {
  @_Concurrency.MainActor public func takeScreenShotWithTableView(targetTableView: UIKit.UITableView, targetViewController: UIKit.UIViewController, outerTopOffset: CoreFoundation.CGFloat, outerBottomOffset: CoreFoundation.CGFloat, innerTopOffset: CoreFoundation.CGFloat, innerBottomOffset: CoreFoundation.CGFloat)
}
extension SwiftAutoScreenShot.AutoScreenShot {
  @_Concurrency.MainActor public func takeScreenshotWithWebView(targetWebView: WebKit.WKWebView, targetViewController: UIKit.UIViewController, outerTopOffset: CoreFoundation.CGFloat, outerBottomOffset: CoreFoundation.CGFloat, innerTopOffset: CoreFoundation.CGFloat, innerBottomOffset: CoreFoundation.CGFloat)
}
public protocol SUAutoScreenShot {
  func screenShot(topOffset: CoreFoundation.CGPoint, imageSize: CoreFoundation.CGSize, targetView: UIKit.UIView?) -> UIKit.UIImage?
  @_Concurrency.MainActor func takeScreenShotWithScroll(outerTopOffset: CoreFoundation.CGFloat, outerBottomOffset: CoreFoundation.CGFloat, innerTopOffset: CoreFoundation.CGFloat, innerBottomOffset: CoreFoundation.CGFloat)
  @_Concurrency.MainActor func takeScreenshot()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SUAutoScreenShotUIViewController : UIKit.UIViewController, SwiftAutoScreenShot.SUAutoScreenShot {
  @_Concurrency.MainActor public func takeScreenshot()
  @_Concurrency.MainActor public func screenShot(topOffset: CoreFoundation.CGPoint, imageSize: CoreFoundation.CGSize, targetView: UIKit.UIView?) -> UIKit.UIImage?
  @_Concurrency.MainActor public func takeScreenShotWithScroll(outerTopOffset: CoreFoundation.CGFloat, outerBottomOffset: CoreFoundation.CGFloat, innerTopOffset: CoreFoundation.CGFloat, innerBottomOffset: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct SUAutoScreenShotViewController : SwiftUI.UIViewControllerRepresentable {
  public typealias UIViewControllerType = SwiftAutoScreenShot.SUAutoScreenShotUIViewController
  public init(_ closure: @escaping (any SwiftAutoScreenShot.SUAutoScreenShot) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: SwiftAutoScreenShot.SUAutoScreenShotViewController.Context) -> SwiftAutoScreenShot.SUAutoScreenShotUIViewController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: SwiftAutoScreenShot.SUAutoScreenShotUIViewController, context: SwiftAutoScreenShot.SUAutoScreenShotViewController.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
}
extension SwiftUI.View {
  public func suAutoScreenShot(_ closure: @escaping (any SwiftAutoScreenShot.SUAutoScreenShot) -> Swift.Void) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func testSnapshot(completionHandler: (UIKit.UIImage) -> Swift.Void) -> UIKit.UIImage
}
